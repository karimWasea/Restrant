@model X.PagedList.IPagedList<Cf_Viewmodels.PriceProductebytypesVM>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    Layout = "_Layout";
    ViewData["Title"] = "All Products";
}
<!-- Modal HTML -->
<div id="customModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <div id="modalMessage"></div>
    </div>
</div>

<style>
     
    .shopping-bag {
        background-color: #f8f9fa; /* Example background color */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }
    /* Add CSS styles for the background image */

    body {
        background-image: url('/Images/CafeBackground.jpg'); /* Change to the background image for a cafe */
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    /* Card Styles */
    .product-card {
        border: 1px solid #dee2e6;
        border-radius: 10px;
        overflow: hidden;
        transition: transform 0.3s ease;
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
        }

        .product-card img {
            width: 100%;
            height: auto;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
        }

    .product-details {
        padding: 1.25rem;
    }

    .product-title {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .product-price {
        font-size: 1rem;
        color: #007bff;
        margin-bottom: 0.5rem;
    }

    .product-category {
        font-size: 0.875rem;
        color: #6c757d;
    }
</style>
<div class="shopping-bag">


<!-- Add the search input form -->
 
<div class="input-group mt-4">
    <input type="text" class="form-control" placeholder="Search..." aria-label="Search" aria-describedby="button-addon2" id="search-input">
    <div class="input-group-append">
        <button class="btn btn-primary" type="button" id="button-addon2">
             بحث
            </button>
        </div>
       

       


    
</div>

 <br />
 <br />
  
        <div>

            <a class="btn btn-danger" asp-area="Admin" asp-action="GetProductbytyp" asp-route-CustomerType="@ViewBag.CustomerType" asp-route-Catid="@C_Utilities.Enumes.CategoryType.HotDrink">بحث مشروبات ساخنه  </a>
            <a class="btn btn-primary" asp-area="Admin" asp-action="GetProductbytyp" asp-route-CustomerType="@ViewBag.CustomerType" asp-route-Catid="@C_Utilities.Enumes.CategoryType.ColdDrink"> بحث مشروبات بارده</a>
            <a class="btn btn-success" asp-area="Admin" asp-action="GetProductbytyp" asp-route-CustomerType="@ViewBag.CustomerType" asp-route-Catid="@C_Utilities.Enumes.CategoryType.Addon"> اضافات بحث</a>
            <a class="btn btn-success" asp-area="Admin" asp-action="GetProductbytyp" asp-route-CustomerType="@ViewBag.CustomerType" asp-route-Catid="">  عرض الكل كل المنتجات</a>
        </div>
    <br />

    <div>
        <a class="btn btn-primary" asp-area="Admin" asp-action="GetallfromShopingCart" asp-route-CustomerType="@ViewBag.CustomerType" asp-route-Catid="">  عرض الفاتوره الكاش</a>
        <a class="btn btn-dark" asp-area="Admin" asp-action="GetallfromShopingCartNopayed" asp-route-CustomerType="@ViewBag.CustomerType" asp-route-Catid="">  عرض الفاتوره الاجل</a>
        <a class="btn btn-secondary" asp-area="Admin" asp-action="GetallfromShopingCart" asp-route-CustomerType="@ViewBag.CustomerType" asp-route-Catid=""> عرض الفاتوره الكاش الاجل  </a>
 
 
       
    </div>


    <div class="container-fluid mt-4">
        <div class="row product-list">
            @foreach (var product in Model)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="card product-card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@product.ProductName</h5>
                            <p class="card-text">السعر: @product.price</p>
                            <p class="card-text">النوع: @Servess.DescriptionEnum.GetDescription(product.Catid)</p>
                        </div>
                        <div class="card-footer">
 
                            <form id="shoppingForm" class="form-inline">
                                <input type="hidden" id="Id" name="Id" value="@product.Id" asp-for="@product.Id" />
                                <input type="hidden" id="catId" name="catId" value="@product.Catid" asp-for="@product.Catid" />
                                <input type="hidden" id="price" name="price" value="@product.price" asp-for="@product.price" />
                                <input type="hidden" id="CustomerType" name="CustomerType" value="@product.CustomerType" asp-for="@product.CustomerType" />
                                <input type="hidden" id="ProductName" name="ProductName" value="@product.ProductName" asp-for="@product.ProductName" />

                                <input type="number" min="1" class="form-control" id="ShopingCaterQantity" name="ShopingCaterQantity" placeholder="الكميه" />
                                <br />
                                <div class="col NotpayedUseridselected">
                                    <select value="NotpayedUserid" name="NotpayedUserid" class="form-select glass-select same-width NotpayedUserid" asp-items="@ViewBag.UsersLists"
                                            aria-required="true" data-placeholder="Select CategoryId" style="z-index: 1;">
                                        <option value="">العميل</option>
                                    </select>
                                    <span asp-validation-for="@product.NotpayedUserid" class="text-danger"></span>
                                </div>
                                <br />
                                @if (product.CustomerType == @C_Utilities.Enumes.CustomerType.oprations)
                                {
                                    <div class="col  ">
                                        <select value="HospitalOroprationtypId" name="HospitalOroprationtypId" class="form-select glass-select same-width HospitalOroprationtypId" asp-items="@ViewBag.HospitalOroprationtypLists"
                                                aria-required="true" data-placeholder="Select CategoryId" style="z-index: 1;">
                                            <option value="">نوع العميل </option>
                                        </select>
                                        <span asp-validation-for="@product.HospitalOroprationtypId" class="text-danger"></span>
                                    </div>

                                }
                           
                               
                                <br />
                                <div class="btn-group d-flex w-100 justify-content-between ml-2" role="group" aria-label="Product Type Buttons">
                                    <button class="btn btn-secondary flex-grow-1 mr-1 cashButton" type="button">كاش</button>
                                    <button class="btn btn-success flex-grow-1 ml-1 creditButton" type="button">اجل</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
@*     <button id="printButton">printButton</button>
 *@<nav aria-label="Page navigation example">
    <ul class="pagination">
        <li class="page-item @(Model.PageNumber == 1 ? "disabled" : "")">
            <a class="page-link" asp-area="Admin" asp-action="GetProductbytyp" asp-route-CustomerType="@ViewBag.CustomerTypec" asp-route-page="1" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        @for (int i = 1; i <= Model.PageCount; i++)
        {
            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                <a class="page-link" asp-action="GetProductbytyp" asp-route-CustomerType="@ViewBag.CustomerType" asp-route-page="@i">@i</a>
            </li>
        }
        <li class="page-item @(Model.PageNumber == Model.PageCount ? "disabled" : "")">
            <a class="page-link" asp-action="GetProductbytyp" asp-route-page="@Model.PageCount" asp-route-CustomerType="@ViewBag.CustomerType" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>
</div>
 
 
<!-- Modal HTML -->
<div id="customModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <div id="modalMessage"></div>
    </div>
</div>

<style>
    /* Modal styles */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 30%; /* Could be more or less, depending on screen size */
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
</style>

@section Scripts {
    <script>
 
        document.addEventListener("DOMContentLoaded", function () {
            // Search functionality
            document.getElementById('search-input').addEventListener('keyup', function () {
                var searchText = this.value.toLowerCase();
                document.querySelectorAll('.product-card').forEach(function (card) {
                    var titleText = card.querySelector('.card-title').textContent.toLowerCase();
                    card.style.display = titleText.includes(searchText) ? '' : 'none';
                });
            });
            

           
            // Event listeners for cash and credit buttons
            document.querySelectorAll(".cashButton").forEach(function (cashButton) {
                cashButton.addEventListener("click", function () {
                  
                    submitFormcash(cashButton, "cash");
                });
            });

            document.querySelectorAll(".creditButton").forEach(function (creditButton) {
                creditButton.addEventListener("click", function () {
                    submitFormcredit(creditButton, "credit");
                });
            });


            function submitFormcash(button, paymentType) {
                const shoppingForm = button.closest("form");
                const quantityInput = shoppingForm.querySelector("#ShopingCaterQantity");
                const NotpayedUserid2 = shoppingForm.querySelector("#NotpayedUserid");
                console.log(NotpayedUserid2);

                const errorSpan = document.createElement("span");
                errorSpan.className = "text-danger error-message";
                errorSpan.textContent = "Please enter a quantity.";

                // Remove existing error messages
                const existingErrorMessage = shoppingForm.querySelector(".error-message");
                if (existingErrorMessage) {
                    existingErrorMessage.remove();
                }

                if (!quantityInput.value || quantityInput.value.trim() === "") {
                    // Display error message if quantity is not entered
                    quantityInput.parentNode.insertBefore(errorSpan, quantityInput.nextSibling);
                    return;
                }

               


                const formData = new FormData(shoppingForm);
                formData.append("paymentType", paymentType);

                fetch("/Admin/PriceProductebytypes/AddShopingCaterCashHistory", {
                    method: "POST",
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showModal(data.message);
                        } else {
                            showModal("اختر العميل ");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        showModal("اختر العميل");
                    });
            }



            function submitFormcredit(button, paymentType) {
                const shoppingForm = button.closest("form");
                const quantityInput = shoppingForm.querySelector("#ShopingCaterQantity");
                const NotpayedUserid2 = shoppingForm.querySelector("#NotpayedUserid");
                console.log(NotpayedUserid2);
                 
                const errorSpan = document.createElement("span");
                errorSpan.className = "text-danger error-message";
                errorSpan.textContent = "Please enter a quantity.";

                // Remove existing error messages
                const existingErrorMessage = shoppingForm.querySelector(".error-message");
                if (existingErrorMessage) {
                    existingErrorMessage.remove();
                }

                if (!quantityInput.value || quantityInput.value.trim() === "") {
                    // Display error message if quantity is not entered
                    quantityInput.parentNode.insertBefore(errorSpan, quantityInput.nextSibling);
                    return;
                }

                 // Now you can perform actions with the select element
                // if (NotpayedUserid2 === null) {
                //      console.log(1)
                //     showModal("اختر العميل ");

                //     return;

                // }

 
                const formData = new FormData(shoppingForm);
                formData.append("paymentType", paymentType);

                fetch("/Admin/PriceProductebytypes/AddShopingCaterNotpayedHistory", {
                    method: "POST",
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showModal(data.message);
                        } else {
                            showModal("اختر العميل ");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        showModal("اختر العميل");
                    });
            }

             

            // Get the modal
            var modal = document.getElementById("customModal");

            // Get the <span> element that closes the modal
            var span = document.getElementsByClassName("close")[0];

            // Function to show the modal with a message
            function showModal(message) {
                var modalMessage = document.getElementById("modalMessage");
                modalMessage.innerHTML = message;
                modal.style.display = "block";
            }

            // When the user clicks on <span> (x), close the modal
            span.onclick = function () {
                modal.style.display = "none";
            }

            // When the user clicks anywhere outside of the modal, close it
            window.onclick = function (event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            }

            // Event listener for shopping cart button
            document.getElementById("shoppingCartButton").addEventListener("click", function (e) {
                e.preventDefault(); // Prevent the default action of the button

                fetch("/Admin/PriceProductebytypes/GetallfromShopingCart", {
                    method: "GET",
                })
                    .then(response => response.text())
                    .then(data => {
                        // Update the content with the response
                        document.getElementById('shoppingCartContent').innerHTML = data;
                        console.log(data);
                        // Show the modal
                        $('#shoppingCartModal').modal('show');
                    })
                    .catch(error => {
                        console.error("Error:", error);
                    });
            });
        });
    </script>
}
